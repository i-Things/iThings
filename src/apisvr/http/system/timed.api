syntax = "v1"

info(
    title: "定时器相关功能"
    desc: "type desc here"
    author: "yl"
    email: "type email here"
    version: "type version here"
)
import "common.api"  //公共结构体定义

@server(
    group: system/timed/task
    prefix: /api/v1/system/timed/task
    middleware: SetupWare, CheckTokenWare, DataAuthWare, TeardownWare
)
service api {
    @doc "添加任务"
    @handler TimedTaskCreate
    post /create (TimedTaskInfo) returns ()

    @doc "获取任务列表"
    @handler TimedTaskIndex
    post /index (TimedTaskIndexReq) returns (TimedTaskIndexResp)

    @doc "更新任务"
    @handler TimedTaskUpdate
    post /update (TimedTaskInfo) returns ()

    @doc "删除任务"
    @handler TimedTaskDelete
    post /delete (TaskInfoDeleteReq) returns ()

    @doc "获取任务信息详情"
    @handler TimedTaskRead
    post /read (TimedTaskReadReq) returns (TimedTaskInfo)

}
type (
    TimedTaskIndexReq struct {
        Page PageInfo `json:"page,optional"` //分页信息,只获取一个则不填
        Group   string  `json:"group,optional"` // 任务组名
        Type    string  `json:"type,optional"` //任务类型:queue(消息队列消息发送)  sql(执行sql) email(邮件发送) http(http请求)
        SubType string  `json:"subType,optional"` //任务子类型 natsJs nats
        Name    string  `json:"name,optional"` // 任务名称
        Code    string  `json:"code,optional"` //任务编码
    }

    TimedTaskInfo struct {
        ID             int64  `json:"id,optional"`                        // 任务ID
        Group          string `json:"group,optional"`                   // 任务组名
        Type           string `json:"type,optional"`                     //任务类型:queue(消息队列消息发送)  sql(执行sql) email(邮件发送) http(http请求)
        SubType        string `json:"subType,optional"`               //任务子类型 natsJs nats
        Name           string `json:"name,optional"`                     // 任务名称
        Code           string `json:"code,optional"`                     //任务编码
        Params         string `json:"params,optional"`                 // 任务参数
        CronExpression string `json:"cronExpression,optional"` // cron执行表达式
        Status         int64  `json:"status,optional"`                // 状态（1:正常运行 2:暂停 3:停止使用）
        EntryID        string `json:"entryID,optional"`              //执行任务的id
        Priority       string `json:"priority,optional"`            //优先级: 6:critical 最高优先级  3: default 普通优先级 1:low 低优先级
    }

    TimedTaskIndexResp struct {
        List []*TimedTaskInfo `json:"list"`  //任务列表数据
        Total int64 `json:"total"`           //任务列表总数
    }

    TaskInfoDeleteReq struct {
        ID int64 `json:"id"`  //编号
    }
    TimedTaskReadReq {
        ID    int64  `json:"id,optional"` // 任务ID
        Group string `json:"group,optional"` // 任务组名
        Code  string `json:"code,optional"` //任务编码
    }


)