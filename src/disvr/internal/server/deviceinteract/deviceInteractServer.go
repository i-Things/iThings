// Code generated by goctl. DO NOT EDIT.
// Source: di.proto

package server

import (
	"context"

	"github.com/i-Things/things/src/disvr/internal/logic/deviceinteract"
	"github.com/i-Things/things/src/disvr/internal/svc"
	"github.com/i-Things/things/src/disvr/pb/di"
)

type DeviceInteractServer struct {
	svcCtx *svc.ServiceContext
	di.UnimplementedDeviceInteractServer
}

func NewDeviceInteractServer(svcCtx *svc.ServiceContext) *DeviceInteractServer {
	return &DeviceInteractServer{
		svcCtx: svcCtx,
	}
}

// 调用设备行为
func (s *DeviceInteractServer) SendAction(ctx context.Context, in *di.SendActionReq) (*di.SendActionResp, error) {
	l := deviceinteractlogic.NewSendActionLogic(ctx, s.svcCtx)
	return l.SendAction(in)
}

// 获取异步调用设备行为的结果
func (s *DeviceInteractServer) ActionRead(ctx context.Context, in *di.RespReadReq) (*di.SendActionResp, error) {
	l := deviceinteractlogic.NewActionReadLogic(ctx, s.svcCtx)
	return l.ActionRead(in)
}

// 回复调用设备行为
func (s *DeviceInteractServer) RespAction(ctx context.Context, in *di.RespActionReq) (*di.Response, error) {
	l := deviceinteractlogic.NewRespActionLogic(ctx, s.svcCtx)
	return l.RespAction(in)
}

// 请求设备获取设备最新属性
func (s *DeviceInteractServer) GetPropertyReply(ctx context.Context, in *di.GetPropertyReplyReq) (*di.GetPropertyReplyResp, error) {
	l := deviceinteractlogic.NewGetPropertyReplyLogic(ctx, s.svcCtx)
	return l.GetPropertyReply(in)
}

// 调用设备属性
func (s *DeviceInteractServer) SendProperty(ctx context.Context, in *di.SendPropertyReq) (*di.SendPropertyResp, error) {
	l := deviceinteractlogic.NewSendPropertyLogic(ctx, s.svcCtx)
	return l.SendProperty(in)
}

// 批量调用设备属性
func (s *DeviceInteractServer) MultiSendProperty(ctx context.Context, in *di.MultiSendPropertyReq) (*di.MultiSendPropertyResp, error) {
	l := deviceinteractlogic.NewMultiSendPropertyLogic(ctx, s.svcCtx)
	return l.MultiSendProperty(in)
}

// 获取异步调用设备属性的结果
func (s *DeviceInteractServer) PropertyRead(ctx context.Context, in *di.RespReadReq) (*di.SendPropertyResp, error) {
	l := deviceinteractlogic.NewPropertyReadLogic(ctx, s.svcCtx)
	return l.PropertyRead(in)
}

// 发送消息给设备
func (s *DeviceInteractServer) SendMsg(ctx context.Context, in *di.SendMsgReq) (*di.SendMsgResp, error) {
	l := deviceinteractlogic.NewSendMsgLogic(ctx, s.svcCtx)
	return l.SendMsg(in)
}
