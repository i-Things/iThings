// Code generated by goctl. DO NOT EDIT.
// Source: scheduler.proto

package scheduler

import (
	"context"

	"github.com/i-Things/things/src/timedschedulersvr/internal/svc"
	"github.com/i-Things/things/src/timedschedulersvr/pb/scheduler"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Request  = scheduler.Request
	Response = scheduler.Response

	Scheduler interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	}

	defaultScheduler struct {
		cli zrpc.Client
	}

	directScheduler struct {
		svcCtx *svc.ServiceContext
		svr    scheduler.SchedulerServer
	}
)

func NewScheduler(cli zrpc.Client) Scheduler {
	return &defaultScheduler{
		cli: cli,
	}
}

func NewDirectScheduler(svcCtx *svc.ServiceContext, svr scheduler.SchedulerServer) Scheduler {
	return &directScheduler{
		svr:    svr,
		svcCtx: svcCtx,
	}
}

func (m *defaultScheduler) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := scheduler.NewSchedulerClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (d *directScheduler) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.Ping(ctx, in)
}
