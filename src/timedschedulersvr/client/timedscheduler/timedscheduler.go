// Code generated by goctl. DO NOT EDIT.
// Source: timedscheduler.proto

package timedscheduler

import (
	"context"

	"github.com/i-Things/things/src/timedschedulersvr/internal/svc"
	"github.com/i-Things/things/src/timedschedulersvr/pb/timedscheduler"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	JobInfo          = timedscheduler.JobInfo
	JobInfoDeleteReq = timedscheduler.JobInfoDeleteReq
	JobInfoIndexReq  = timedscheduler.JobInfoIndexReq
	JobInfoIndexResp = timedscheduler.JobInfoIndexResp
	JobInfoReadReq   = timedscheduler.JobInfoReadReq
	PageInfo         = timedscheduler.PageInfo
	PageInfo_OrderBy = timedscheduler.PageInfo_OrderBy
	Response         = timedscheduler.Response

	Timedscheduler interface {
		// 新增任务
		JobInfoCreate(ctx context.Context, in *JobInfo, opts ...grpc.CallOption) (*Response, error)
		// 更新任务
		JobInfoUpdate(ctx context.Context, in *JobInfo, opts ...grpc.CallOption) (*Response, error)
		// 删除任务
		JobInfoDelete(ctx context.Context, in *JobInfoDeleteReq, opts ...grpc.CallOption) (*Response, error)
		// 获取任务信息列表
		JobInfoIndex(ctx context.Context, in *JobInfoIndexReq, opts ...grpc.CallOption) (*JobInfoIndexResp, error)
		// 获取任务信息详情
		JobInfoRead(ctx context.Context, in *JobInfoReadReq, opts ...grpc.CallOption) (*JobInfo, error)
	}

	defaultTimedscheduler struct {
		cli zrpc.Client
	}

	directTimedscheduler struct {
		svcCtx *svc.ServiceContext
		svr    timedscheduler.TimedschedulerServer
	}
)

func NewTimedscheduler(cli zrpc.Client) Timedscheduler {
	return &defaultTimedscheduler{
		cli: cli,
	}
}

func NewDirectTimedscheduler(svcCtx *svc.ServiceContext, svr timedscheduler.TimedschedulerServer) Timedscheduler {
	return &directTimedscheduler{
		svr:    svr,
		svcCtx: svcCtx,
	}
}

// 新增任务
func (m *defaultTimedscheduler) JobInfoCreate(ctx context.Context, in *JobInfo, opts ...grpc.CallOption) (*Response, error) {
	client := timedscheduler.NewTimedschedulerClient(m.cli.Conn())
	return client.JobInfoCreate(ctx, in, opts...)
}

// 新增任务
func (d *directTimedscheduler) JobInfoCreate(ctx context.Context, in *JobInfo, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.JobInfoCreate(ctx, in)
}

// 更新任务
func (m *defaultTimedscheduler) JobInfoUpdate(ctx context.Context, in *JobInfo, opts ...grpc.CallOption) (*Response, error) {
	client := timedscheduler.NewTimedschedulerClient(m.cli.Conn())
	return client.JobInfoUpdate(ctx, in, opts...)
}

// 更新任务
func (d *directTimedscheduler) JobInfoUpdate(ctx context.Context, in *JobInfo, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.JobInfoUpdate(ctx, in)
}

// 删除任务
func (m *defaultTimedscheduler) JobInfoDelete(ctx context.Context, in *JobInfoDeleteReq, opts ...grpc.CallOption) (*Response, error) {
	client := timedscheduler.NewTimedschedulerClient(m.cli.Conn())
	return client.JobInfoDelete(ctx, in, opts...)
}

// 删除任务
func (d *directTimedscheduler) JobInfoDelete(ctx context.Context, in *JobInfoDeleteReq, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.JobInfoDelete(ctx, in)
}

// 获取任务信息列表
func (m *defaultTimedscheduler) JobInfoIndex(ctx context.Context, in *JobInfoIndexReq, opts ...grpc.CallOption) (*JobInfoIndexResp, error) {
	client := timedscheduler.NewTimedschedulerClient(m.cli.Conn())
	return client.JobInfoIndex(ctx, in, opts...)
}

// 获取任务信息列表
func (d *directTimedscheduler) JobInfoIndex(ctx context.Context, in *JobInfoIndexReq, opts ...grpc.CallOption) (*JobInfoIndexResp, error) {
	return d.svr.JobInfoIndex(ctx, in)
}

// 获取任务信息详情
func (m *defaultTimedscheduler) JobInfoRead(ctx context.Context, in *JobInfoReadReq, opts ...grpc.CallOption) (*JobInfo, error) {
	client := timedscheduler.NewTimedschedulerClient(m.cli.Conn())
	return client.JobInfoRead(ctx, in, opts...)
}

// 获取任务信息详情
func (d *directTimedscheduler) JobInfoRead(ctx context.Context, in *JobInfoReadReq, opts ...grpc.CallOption) (*JobInfo, error) {
	return d.svr.JobInfoRead(ctx, in)
}
