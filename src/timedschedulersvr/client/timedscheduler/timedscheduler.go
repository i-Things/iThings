// Code generated by goctl. DO NOT EDIT.
// Source: timedscheduler.proto

package timedscheduler

import (
	"context"

	"github.com/i-Things/things/src/timedschedulersvr/internal/svc"
	"github.com/i-Things/things/src/timedschedulersvr/pb/timedscheduler"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	PageInfo          = timedscheduler.PageInfo
	PageInfo_OrderBy  = timedscheduler.PageInfo_OrderBy
	Response          = timedscheduler.Response
	TaskInfo          = timedscheduler.TaskInfo
	TaskInfoDeleteReq = timedscheduler.TaskInfoDeleteReq
	TaskInfoIndexReq  = timedscheduler.TaskInfoIndexReq
	TaskInfoIndexResp = timedscheduler.TaskInfoIndexResp
	TaskInfoReadReq   = timedscheduler.TaskInfoReadReq

	Timedscheduler interface {
		// 新增任务
		TaskInfoCreate(ctx context.Context, in *TaskInfo, opts ...grpc.CallOption) (*Response, error)
		// 更新任务
		TaskInfoUpdate(ctx context.Context, in *TaskInfo, opts ...grpc.CallOption) (*Response, error)
		// 删除任务
		TaskInfoDelete(ctx context.Context, in *TaskInfoDeleteReq, opts ...grpc.CallOption) (*Response, error)
		// 获取任务信息列表
		TaskInfoIndex(ctx context.Context, in *TaskInfoIndexReq, opts ...grpc.CallOption) (*TaskInfoIndexResp, error)
		// 获取任务信息详情
		TaskInfoRead(ctx context.Context, in *TaskInfoReadReq, opts ...grpc.CallOption) (*TaskInfo, error)
	}

	defaultTimedscheduler struct {
		cli zrpc.Client
	}

	directTimedscheduler struct {
		svcCtx *svc.ServiceContext
		svr    timedscheduler.TimedschedulerServer
	}
)

func NewTimedscheduler(cli zrpc.Client) Timedscheduler {
	return &defaultTimedscheduler{
		cli: cli,
	}
}

func NewDirectTimedscheduler(svcCtx *svc.ServiceContext, svr timedscheduler.TimedschedulerServer) Timedscheduler {
	return &directTimedscheduler{
		svr:    svr,
		svcCtx: svcCtx,
	}
}

// 新增任务
func (m *defaultTimedscheduler) TaskInfoCreate(ctx context.Context, in *TaskInfo, opts ...grpc.CallOption) (*Response, error) {
	client := timedscheduler.NewTimedschedulerClient(m.cli.Conn())
	return client.TaskInfoCreate(ctx, in, opts...)
}

// 新增任务
func (d *directTimedscheduler) TaskInfoCreate(ctx context.Context, in *TaskInfo, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.TaskInfoCreate(ctx, in)
}

// 更新任务
func (m *defaultTimedscheduler) TaskInfoUpdate(ctx context.Context, in *TaskInfo, opts ...grpc.CallOption) (*Response, error) {
	client := timedscheduler.NewTimedschedulerClient(m.cli.Conn())
	return client.TaskInfoUpdate(ctx, in, opts...)
}

// 更新任务
func (d *directTimedscheduler) TaskInfoUpdate(ctx context.Context, in *TaskInfo, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.TaskInfoUpdate(ctx, in)
}

// 删除任务
func (m *defaultTimedscheduler) TaskInfoDelete(ctx context.Context, in *TaskInfoDeleteReq, opts ...grpc.CallOption) (*Response, error) {
	client := timedscheduler.NewTimedschedulerClient(m.cli.Conn())
	return client.TaskInfoDelete(ctx, in, opts...)
}

// 删除任务
func (d *directTimedscheduler) TaskInfoDelete(ctx context.Context, in *TaskInfoDeleteReq, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.TaskInfoDelete(ctx, in)
}

// 获取任务信息列表
func (m *defaultTimedscheduler) TaskInfoIndex(ctx context.Context, in *TaskInfoIndexReq, opts ...grpc.CallOption) (*TaskInfoIndexResp, error) {
	client := timedscheduler.NewTimedschedulerClient(m.cli.Conn())
	return client.TaskInfoIndex(ctx, in, opts...)
}

// 获取任务信息列表
func (d *directTimedscheduler) TaskInfoIndex(ctx context.Context, in *TaskInfoIndexReq, opts ...grpc.CallOption) (*TaskInfoIndexResp, error) {
	return d.svr.TaskInfoIndex(ctx, in)
}

// 获取任务信息详情
func (m *defaultTimedscheduler) TaskInfoRead(ctx context.Context, in *TaskInfoReadReq, opts ...grpc.CallOption) (*TaskInfo, error) {
	client := timedscheduler.NewTimedschedulerClient(m.cli.Conn())
	return client.TaskInfoRead(ctx, in, opts...)
}

// 获取任务信息详情
func (d *directTimedscheduler) TaskInfoRead(ctx context.Context, in *TaskInfoReadReq, opts ...grpc.CallOption) (*TaskInfo, error) {
	return d.svr.TaskInfoRead(ctx, in)
}
