// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/timedscheduler.proto

package timedscheduler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimedschedulerClient is the client API for Timedscheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimedschedulerClient interface {
	//新增任务
	JobInfoCreate(ctx context.Context, in *JobInfo, opts ...grpc.CallOption) (*Response, error)
	//更新任务
	JobInfoUpdate(ctx context.Context, in *JobInfo, opts ...grpc.CallOption) (*Response, error)
	//删除任务
	JobInfoDelete(ctx context.Context, in *JobInfoDeleteReq, opts ...grpc.CallOption) (*Response, error)
	//获取任务信息列表
	JobInfoIndex(ctx context.Context, in *JobInfoIndexReq, opts ...grpc.CallOption) (*JobInfoIndexResp, error)
	//获取任务信息详情
	JobInfoRead(ctx context.Context, in *JobInfoReadReq, opts ...grpc.CallOption) (*JobInfo, error)
}

type timedschedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewTimedschedulerClient(cc grpc.ClientConnInterface) TimedschedulerClient {
	return &timedschedulerClient{cc}
}

func (c *timedschedulerClient) JobInfoCreate(ctx context.Context, in *JobInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/timedscheduler.timedscheduler/jobInfoCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timedschedulerClient) JobInfoUpdate(ctx context.Context, in *JobInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/timedscheduler.timedscheduler/jobInfoUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timedschedulerClient) JobInfoDelete(ctx context.Context, in *JobInfoDeleteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/timedscheduler.timedscheduler/jobInfoDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timedschedulerClient) JobInfoIndex(ctx context.Context, in *JobInfoIndexReq, opts ...grpc.CallOption) (*JobInfoIndexResp, error) {
	out := new(JobInfoIndexResp)
	err := c.cc.Invoke(ctx, "/timedscheduler.timedscheduler/jobInfoIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timedschedulerClient) JobInfoRead(ctx context.Context, in *JobInfoReadReq, opts ...grpc.CallOption) (*JobInfo, error) {
	out := new(JobInfo)
	err := c.cc.Invoke(ctx, "/timedscheduler.timedscheduler/jobInfoRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimedschedulerServer is the server API for Timedscheduler service.
// All implementations must embed UnimplementedTimedschedulerServer
// for forward compatibility
type TimedschedulerServer interface {
	//新增任务
	JobInfoCreate(context.Context, *JobInfo) (*Response, error)
	//更新任务
	JobInfoUpdate(context.Context, *JobInfo) (*Response, error)
	//删除任务
	JobInfoDelete(context.Context, *JobInfoDeleteReq) (*Response, error)
	//获取任务信息列表
	JobInfoIndex(context.Context, *JobInfoIndexReq) (*JobInfoIndexResp, error)
	//获取任务信息详情
	JobInfoRead(context.Context, *JobInfoReadReq) (*JobInfo, error)
	mustEmbedUnimplementedTimedschedulerServer()
}

// UnimplementedTimedschedulerServer must be embedded to have forward compatible implementations.
type UnimplementedTimedschedulerServer struct {
}

func (UnimplementedTimedschedulerServer) JobInfoCreate(context.Context, *JobInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobInfoCreate not implemented")
}
func (UnimplementedTimedschedulerServer) JobInfoUpdate(context.Context, *JobInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobInfoUpdate not implemented")
}
func (UnimplementedTimedschedulerServer) JobInfoDelete(context.Context, *JobInfoDeleteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobInfoDelete not implemented")
}
func (UnimplementedTimedschedulerServer) JobInfoIndex(context.Context, *JobInfoIndexReq) (*JobInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobInfoIndex not implemented")
}
func (UnimplementedTimedschedulerServer) JobInfoRead(context.Context, *JobInfoReadReq) (*JobInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobInfoRead not implemented")
}
func (UnimplementedTimedschedulerServer) mustEmbedUnimplementedTimedschedulerServer() {}

// UnsafeTimedschedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimedschedulerServer will
// result in compilation errors.
type UnsafeTimedschedulerServer interface {
	mustEmbedUnimplementedTimedschedulerServer()
}

func RegisterTimedschedulerServer(s grpc.ServiceRegistrar, srv TimedschedulerServer) {
	s.RegisterService(&Timedscheduler_ServiceDesc, srv)
}

func _Timedscheduler_JobInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimedschedulerServer).JobInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timedscheduler.timedscheduler/jobInfoCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimedschedulerServer).JobInfoCreate(ctx, req.(*JobInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timedscheduler_JobInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimedschedulerServer).JobInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timedscheduler.timedscheduler/jobInfoUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimedschedulerServer).JobInfoUpdate(ctx, req.(*JobInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timedscheduler_JobInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobInfoDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimedschedulerServer).JobInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timedscheduler.timedscheduler/jobInfoDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimedschedulerServer).JobInfoDelete(ctx, req.(*JobInfoDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timedscheduler_JobInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimedschedulerServer).JobInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timedscheduler.timedscheduler/jobInfoIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimedschedulerServer).JobInfoIndex(ctx, req.(*JobInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timedscheduler_JobInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobInfoReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimedschedulerServer).JobInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timedscheduler.timedscheduler/jobInfoRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimedschedulerServer).JobInfoRead(ctx, req.(*JobInfoReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Timedscheduler_ServiceDesc is the grpc.ServiceDesc for Timedscheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Timedscheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "timedscheduler.timedscheduler",
	HandlerType: (*TimedschedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "jobInfoCreate",
			Handler:    _Timedscheduler_JobInfoCreate_Handler,
		},
		{
			MethodName: "jobInfoUpdate",
			Handler:    _Timedscheduler_JobInfoUpdate_Handler,
		},
		{
			MethodName: "jobInfoDelete",
			Handler:    _Timedscheduler_JobInfoDelete_Handler,
		},
		{
			MethodName: "jobInfoIndex",
			Handler:    _Timedscheduler_JobInfoIndex_Handler,
		},
		{
			MethodName: "jobInfoRead",
			Handler:    _Timedscheduler_JobInfoRead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/timedscheduler.proto",
}
